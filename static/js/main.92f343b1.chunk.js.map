{"version":3,"sources":["components/card.jsx","firebase.js","redux/charsDuck.js","components/home.jsx","components/favPage.jsx","redux/userDuck.js","components/login.jsx","routes/routes.js","containers/App.js","serviceWorker.js","redux/store.js","index.js"],"names":["onClick","text","console","log","Card","name","image","rightClick","leftClick","fav","className","alt","src","size","defaultProps","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","collection","initialData","fetching","array","current","favorites","saveStorageFavs","favs","localStorage","JSON","stringify","retrieveFavs","dispatch","getState","type","uid","doc","get","then","snap","data","getFavs","user","payload","catch","err","message","mapDispatchToProps","removeChar","characters","shift","addFavorite","state","character","push","set","updateFavs","connect","chars","char","renderChar","map","i","key","length","loggedIn","doGoogleLoginAction","provider","auth","GoogleAuthProvider","signInWithPopup","loginWithGoogle","displayName","email","photoURL","saveStorage","axios","res","results","getCharactersAction","logOutAction","signOut","removeItem","clearFavs","height","PrivateRoute","path","component","rest","alert","to","exact","Home","FavPage","Login","App","activeClassName","Boolean","window","location","hostname","match","roorReducer","combineReducers","action","error","errChars","errFavs","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","getItem","parse","restoreSessionAction","restoreFavsAction","generateStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92f343b1.chunk.js","sourcesContent":["import React from 'react';\nimport FontAwesome from 'react-fontawesome';\nimport PropTypes from 'prop-types';\n\nimport '../assets/styles/card.css';\n\n\nlet rick = 'https://rickandmortyapi.com/api/character/avatar/1.jpeg';\n\nconst onClick = (text) => {\n    return () => console.log(text);\n}\n\nconst Card = ({name, image, rightClick, leftClick, fav}) => {\n    return (\n        <div className='container-card'>\n            <div className='card'>\n                <img alt=\"rick\" src={image} />\n                <p className='name'>\n                    {name}\n                </p>\n                { !fav && <div className='actions'>\n                    <div\n                        onClick={leftClick || onClick('left')}\n                        className='left'>\n                        <FontAwesome\n                            name=\"thumbs-down\"\n                            size=\"2x\"\n                        />\n                    </div>\n                    <div\n                        onClick={rightClick || onClick('right')}\n                        className='right'>\n                        <FontAwesome\n                            name=\"heart\"\n                            size=\"2x\"\n                        />\n                    </div>\n                </div>\n                }\n            </div>\n        </div>\n    )\n}\n\nCard.propTypes = {\n    name: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    leftClick: PropTypes.func,\n    rightClick: PropTypes.func,\n}\n\nCard.defaultProps = {\n    name: 'Rick Sanchez',\n    image: rick,\n}\n\nexport default Card;\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCISUSaUd8qPfZQaznVtR65JbqkKFTRT0E\",\n  authDomain: \"rickandmorty-63a4a.firebaseapp.com\",\n  databaseURL: \"https://rickandmorty-63a4a.firebaseio.com\",\n  projectId: \"rickandmorty-63a4a\",\n  storageBucket: \"rickandmorty-63a4a.appspot.com\",\n  messagingSenderId: \"964947428142\",\n  appId: \"1:964947428142:web:04458daa1e0b5f906870bf\"\n};\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const loginWithGoogle = () => {\n    let provider = new firebase.auth.GoogleAuthProvider();\n    return firebase.auth().signInWithPopup(provider)\n        .then(snap => snap.user)\n};\n\nexport const signOutGoogle = () => {\n  firebase.auth().signOut();\n}\n\nlet db = firebase.firestore().collection('favs');\n\n//Obtener los personajes favoritos\nexport const getFavs = (uid) => {\n  return db.doc(uid).get()\n    .then(snap => {\n      return snap.data().array\n    })\n}\n\n//Guarda los personajes favoritos\nexport const updateFavs = (array, uid) => {\n  return db.doc(uid).set({array}); //set debe recibir un objeto\n}\n\n","import axios from 'axios';\nimport {updateFavs, getFavs} from '../firebase';\n\n// Constanst\nconst initialData = {\n    fetching: false,\n    array: [],\n    current: {},\n    favorites: [],\n}\n\nconst URL = \"https://rickandmortyapi.com/api/character\";\n\nconst GET_CHARACTERS = 'GET_CHARACTERS';\nconst GET_CHARACTERS_SUCCES = 'GET_CHARACTERS_SUCCES';\nconst GET_CHARACTERS_ERROR = 'GET_CHARACTERS_ERROR';\n\nconst REMOVE_CHARACTER = 'REMOVE_CHARACTER';\n\nconst ADD_TO_FAVORITE = 'ADD_TO_FAVORITE';\n\nconst GET_FAVS = 'GET_FAVS';\nconst GET_FAVS_SUCCESS = 'GET_FAVS_SUCCESS';\nconst GET_FAVS_ERROR = 'GET_FAVS_ERROR';\n\nconst CLEAR_FAVS = 'CLEAR_FAVS';\n\n\n// reducer\nexport default function reducer(state = initialData, action){\n    switch(action.type){\n        case GET_CHARACTERS:\n            return {...state, fetching: true};\n        case GET_CHARACTERS_SUCCES:\n            return {...state, array: action.payload, fetching: false};\n        case GET_CHARACTERS_ERROR:\n            return {...state, fetching: false, errChars: action.payload};\n        case REMOVE_CHARACTER:\n            return {...state, array: action.payload};\n        case ADD_TO_FAVORITE:\n            return {...state, ...action.payload};\n        case GET_FAVS:\n            return {...state, fetching: true};\n        case GET_FAVS_SUCCESS:\n            return {...state, fetching: false, favorites: action.payload};\n        case GET_FAVS_ERROR:\n            return {...state, fetching: false, errFavs: action.payload};\n        case CLEAR_FAVS:\n            return {...initialData};\n        default:\n            return state;\n    }\n};\n// Axiliar\nconst saveStorageFavs = (favs) => {\n    localStorage.favs = JSON.stringify(favs);\n}\n\n// actions (thunks)\nexport const getCharactersAction = () => (dispatch, getState) => {\n    dispatch({\n        type: GET_CHARACTERS,\n    })\n    return axios.get(URL)\n        .then((res) => {\n            dispatch({\n                type: GET_CHARACTERS_SUCCES,\n                payload: res.data.results,\n            })\n        })\n        .catch(err => {\n            dispatch({\n                type: GET_CHARACTERS_ERROR,\n                payload: err.message,\n            })\n        })\n} \n\nexport const removeCharacterAction = () => (dispatch, getState) => {\n    let { array } = getState().characters; //getState me retorna un arreglo de todo el store\n    array.shift(); //Elimino el primer elemento del array\n    dispatch({\n        type: REMOVE_CHARACTER,\n        payload: [...array], //Devuelvo un nuevo array\n    })\n}\n\nexport const addFavoriteAction = () => (dispatch, getState) => {\n    let state = getState();\n    let { array, favorites } = state.characters;\n    let { uid } = state.user;\n    let character = array.shift();\n    favorites.push(character);\n    //Guarda los favs en la db\n    updateFavs(favorites, uid);\n    saveStorageFavs(favorites);\n    dispatch({\n        type: ADD_TO_FAVORITE,\n        payload: { array: [...array], favorites: [...favorites] },\n    })\n}\n\nexport const retrieveFavs = () => (dispatch, getState) => {\n    dispatch({\n        type: GET_FAVS,\n    })\n    let { uid } = getState().user;\n    return getFavs(uid)\n        .then((array) => {\n            dispatch({\n                type: GET_FAVS_SUCCESS,\n                payload: [...array],\n            })\n            saveStorageFavs(array);\n        })\n        .catch(err => {\n            dispatch({\n                type: GET_FAVS_ERROR,\n                payload: err.message,\n            })\n        })\n}\n\n//Recuperar favoritos de localStorage\nexport const restoreFavsAction = () => (dispatch) => {\n    let favs = localStorage.getItem('favs');\n    favs = JSON.parse(favs);\n    if(favs){\n        dispatch({\n            type: GET_FAVS_SUCCESS,\n            payload: favs,\n        })\n    }\n}\n\n//Eliminar favs \nexport const clearFavs = () => (dispatch) => {\n    dispatch({\n        type: CLEAR_FAVS,\n    })\n}\n","import React from 'react';\nimport Card from './card';\nimport '../assets/styles/home.css';\nimport { connect } from 'react-redux'; //Conecta nuestro componente con redux\nimport {removeCharacterAction, addFavoriteAction} from '../redux/charsDuck';\n\nconst Home = ({ chars, removeChar, addFavorite }) => {\n\n    const renderChar = () => {\n        let char = chars[0];\n        return(\n            <Card leftClick={removeChar} rightClick={addFavorite} {...char}/>\n        )\n    }\n\n    return (\n        <div className='container'>\n            <h2>Personajes de Rick y Morty</h2>\n            <div>\n                {renderChar()}\n            </div>\n        </div>\n    )\n}\n\n//Me retorna props al componente\nconst mapStateToProps = (state) => {\n    return {\n        chars: state.characters.array,\n    }\n};\n\n//El connect se encarga de pasarle el dispatch y getState, esa es la ventaja de que si lo hacemos manual como en store.js\nconst mapDispatchToProps = {\n    removeChar: removeCharacterAction,\n    addFavorite: addFavoriteAction,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n//El connect tiene dos funciones\n//Pedir datos que ya tiene el store\n\n//Despachar una accion","import React from 'react'\nimport Card from './card';\nimport '../assets/styles/favPage.css';\nimport { connect } from 'react-redux';\n\nconst FavPage = ({ characters = [0]}) => {\n    const renderCharacter = (char, i) => {\n        return (\n            <Card fav {...char} key={i} />\n        )\n    }\n    return(\n        <div className='container'>\n            <h2>Favoritos</h2>\n            {characters.map(renderCharacter)}\n            {!characters.length && <h3>No hay personajes agregados</h3>}\n        </div>\n    )\n};\n\nconst mapStateToProps = ({characters}) => {\n    return {\n        characters: characters.favorites,\n    }\n}\n\nexport default connect(mapStateToProps, null)(FavPage);","import { loginWithGoogle, signOutGoogle } from '../firebase';\nimport { getCharactersAction, retrieveFavs, clearFavs } from './charsDuck';\n\n// Constanst\nconst initialData = {\n    fetching: false,\n    loggedIn: false,\n}\n\nconst LOGIN = 'LOGIN';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_ERROR = 'LOGIN_ERROR';\n\nconst LOG_OUT = 'LOG_OUT';\n\n// Reducers\nexport default function reducer(state = initialData , action) {\n    switch(action.type) {\n        case LOGIN:\n            return {...state, fetching: true};\n        case LOGIN_SUCCESS:\n            return {...state, fetching: false,loggedIn: true , ...action.payload}\n        case LOGIN_ERROR:\n            return {...state, fetching: false, error: action.payload};\n        case LOG_OUT:\n            return {...initialData};\n        default:\n            return state;\n    }\n}\n\n//Auxiliar \nconst saveStorage = (user) => {\n    localStorage.user = JSON.stringify(user);\n}\n\n// Actions \nexport const doGoogleLoginAction = () => (dispatch, getState) => {\n    dispatch({\n        type: LOGIN,\n    })\n    return loginWithGoogle()\n        .then(user => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: {\n                    uid: user.uid,\n                    displayName: user.displayName,\n                    email: user.email,\n                    photoURL: user.photoURL,\n                },\n            });\n            saveStorage(getState().user);\n            //Obtiene los personajes\n            getCharactersAction()(dispatch, getState);\n            //Llamamos a este action cuando el user se loggee, el cual recupera los favs de la db\n            retrieveFavs()(dispatch, getState);\n\n        })\n        .catch(err => {\n            dispatch({\n                type: LOGIN_ERROR,\n                payload: err.message,\n            })\n        })\n}\n\n//Obtener al user del localStorage\nexport const restoreSessionAction = () => (dispatch) => {\n    let user = localStorage.getItem('user');\n    user = JSON.parse(user);\n    if(user) {\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: user,\n        })\n    }\n}\n\nexport const logOutAction = () => (dispatch) => {\n    //Cerramos sesion en firebase\n    signOutGoogle();\n    dispatch({\n        type: LOG_OUT,\n    })\n    //Eliminamos al user del localStorage\n    localStorage.removeItem('user');\n    localStorage.removeItem('favs');\n\n    //Limpia el state\n    clearFavs()(dispatch);\n}","import React from 'react'\nimport '../assets/styles/login.css';\nimport { connect } from 'react-redux';\nimport {doGoogleLoginAction, logOutAction} from '../redux/userDuck';\n\nconst Login = ({ fetching , loggedIn, displayName, photoURL , doGoogleLoginAction, logOutAction }) => {\n\n    const doLogin = () => {\n        doGoogleLoginAction();\n    }\n    \n    if (fetching) return <h2>Esperando inicio con Google...</h2>;\n    return (\n        <div className='container'>\n            {loggedIn?\n                (<h1>{displayName}</h1>) :\n                (<h1>Inicia Sesión con Google</h1>)\n            }\n            {loggedIn && <img src={photoURL} height='150' alt='userPhoto' ></img>}\n            {loggedIn?\n                <button onClick={logOutAction}>Cerrar Sesión</button> :\n                <button onClick={doLogin}>Iniciar</button>\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ user: {fetching, loggedIn, displayName, photoURL} }) => {\n    return {\n        fetching,\n        loggedIn,\n        displayName,\n        photoURL,\n    }\n}\n\nconst mapDispatchToProps = {\n    doGoogleLoginAction,\n    logOutAction,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\nimport { Switch, Route, Redirect} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Home from '../components/home';\nimport FavPage from '../components/favPage';\nimport Login from '../components/login';\n\nconst PrivateRoute = ({path, component, loggedIn, ...rest}) => {\n    if(loggedIn)\n        return <Route path={path} component={component} {...rest} />;\n    alert('Inicia sesión para ver este apartado');\n    return <Redirect to='/login' {...rest}/>;\n}\n\nconst Routes = ({loggedIn}) => {\n    return (\n    // <BrowserRouter>\n        <Switch>\n            <PrivateRoute exact path='/' component={Home} loggedIn={loggedIn}/>\n            <PrivateRoute path='/favs' component={FavPage} loggedIn={loggedIn}/>\n            <Route path='/login' component={Login}/>\n        </Switch>\n    // </BrowserRouter>\n)}\n\nconst mapStateToProps = (state) => {\n    return {\n        loggedIn: state.user.loggedIn,\n    }\n}\n\nexport default connect(mapStateToProps, null)(Routes);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../assets/styles/App.css';\n\nimport Routes from '../routes/routes';\n\nconst App = () => {\n  return (\n    <div className='App'>\n        <div className='nav-bar'>\n          <NavLink className=\"link\" activeClassName='active' exact to='/'>\n            Inicio\n          </NavLink>\n          <NavLink className=\"link\" activeClassName='active' exact to='/favs'>\n            Favoritos\n          </NavLink>\n          <NavLink className=\"link\" activeClassName='active' exact to='/login'>\n            Login\n          </NavLink>\n        </div>\n        <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, compose, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk'; //Para hacer consumos al backend\nimport userReducer, {restoreSessionAction} from './userDuck'; //Como esta export default le puedo poner cualquier nombre, en este caso userReducer\nimport charsReducer, { restoreFavsAction} from './charsDuck';\n\n//Para tener un solo reducer que sera la combinacion de muchos\nlet roorReducer = combineReducers({\n    user: userReducer,\n    characters: charsReducer,\n});\n\n//Pregunta si el navegador soporta las herramientas de desarrollo\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n//Esta funcion va a crear el Store y lo va a retornar\nexport default function generateStore() {\n    //Recibe el reducer, estado inicial(en este caso no le pasamos), middleware que querramos que soporte el store\n    let store = createStore(\n        roorReducer, \n        composeEnhancers(applyMiddleware(thunk)),\n    );\n\n    //Como yo quiero llamar un action por defecto en especifico\n    restoreSessionAction()(store.dispatch); //recupera la sesion del usuario del localstorage\n    restoreFavsAction()(store.dispatch);\n    return store;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './assets/styles/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.css';\nimport { Provider } from 'react-redux';\nimport generateStore from './redux/store';\n\nlet store = generateStore();\n\nReactDOM.render(\n  <Provider store={store} >\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>  \n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}